from PyQt6.QtMultimedia import QMediaPlayer, QAudioOutput, QAudioFormat
from PyQt6.QtCore import QUrl, QBuffer, QIODevice
import sounddevice as sd
import numpy as np
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class AudioManager:
    def __init__(self, sample_rate=48000, channels=2):
        self.sample_rate = sample_rate
        self.output_channels = channels
        self.input_stream = None
        self.audio_output = None
        self.audio_buffer = None
        self.ringtone_player = QMediaPlayer()
        self.ringtone_output = QAudioOutput()
        self.ringtone_player.setAudioOutput(self.ringtone_output)
        self.notification_player = QMediaPlayer()
        self.notification_output = QAudioOutput()
        self.notification_player.setAudioOutput(self.notification_output)

    def start_output_stream(self):
        if self.audio_output:
            logging.info("üîä –ê—É–¥–∏–æ–≤—ã—Ö–æ–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ –¥–ª—è QAudioOutput
            audio_format = QAudioFormat()
            audio_format.setSampleRate(self.sample_rate)
            audio_format.setChannelCount(self.output_channels)
            audio_format.setSampleFormat(QAudioFormat.SampleFormat.Float32)
            self.audio_output = QAudioOutput(audio_format)
            self.audio_output.setVolume(1.0)
            self.audio_buffer = QBuffer()
            self.audio_buffer.open(QIODevice.OpenModeFlag.WriteOnly)
            logging.info("üîä –ê—É–¥–∏–æ–≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ QAudioOutput")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ QAudioOutput: {type(e).__name__}: {e}")
            self.audio_output = None

    def play_audio_chunk(self, audio_chunk: np.ndarray):
        try:
            logging.debug(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ: shape={audio_chunk.shape}, dtype={audio_chunk.dtype}, max={np.max(np.abs(audio_chunk))}")
            if audio_chunk.dtype != np.float32:
                audio_chunk = audio_chunk.astype(np.float32)
            # –£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (x20, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–ª–∏–ø–ø–∏–Ω–≥–∞)
            audio_chunk = np.clip(audio_chunk * 20.0, -1.0, 1.0)
            logging.debug(f"–ü–æ—Å–ª–µ —É—Å–∏–ª–µ–Ω–∏—è: max={np.max(np.abs(audio_chunk))}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –º–∞—Å—Å–∏–≤–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–µ—Ä–µ–æ
            if audio_chunk.ndim == 1:
                audio_chunk = np.repeat(audio_chunk[:, np.newaxis], self.output_channels, axis=1)
            elif audio_chunk.shape[1] != self.output_channels:
                audio_chunk = np.repeat(audio_chunk[:, :1], self.output_channels, axis=1)
            if self.audio_output and self.audio_output.state() != QAudioOutput.State.Stopped:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è QAudioOutput
                audio_bytes = audio_chunk.tobytes()
                self.audio_buffer.write(audio_bytes)
                self.audio_output.start(self.audio_buffer)
                logging.debug(f"–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ QAudioOutput: shape={audio_chunk.shape}")
            else:
                logging.warning("‚ö† QAudioOutput –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {type(e).__name__}: {e}")

    def stop_output_stream(self):
        if self.audio_output:
            try:
                self.audio_output.stop()
                if self.audio_buffer:
                    self.audio_buffer.close()
                logging.info("üîá –ê—É–¥–∏–æ–≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ QAudioOutput: {type(e).__name__}: {e}")
            finally:
                self.audio_output = None
                self.audio_buffer = None

    def play_ringtone(self, path: str, loop: bool = True):
        try:
            self.ringtone_player.setSource(QUrl.fromLocalFile(path))
            self.ringtone_output.setVolume(0.8)
            self.ringtone_player.setLoops(-1 if loop else 1)
            self.ringtone_player.play()
            logging.info(f"üìû –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∏–Ω–≥—Ç–æ–Ω–∞: {path}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ä–∏–Ω–≥—Ç–æ–Ω–∞: {type(e).__name__}: {e}")

    def stop_ringtone(self):
        try:
            self.ringtone_player.stop()
            logging.info("üì¥ –†–∏–Ω–≥—Ç–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∏–Ω–≥—Ç–æ–Ω–∞: {type(e).__name__}: {e}")

    def play_notification(self, path: str):
        try:
            self.notification_player.setSource(QUrl.fromLocalFile(path))
            self.notification_output.setVolume(0.6)
            self.notification_player.play()
            logging.info(f"üîî –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {path}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {type(e).__name__}: {e}")

    def start_microphone_stream(self, callback):
        try:
            devices = sd.query_devices()
            logging.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            for i, dev in enumerate(devices):
                logging.info(f"{i}: {dev['name']} (in:{dev['max_input_channels']} out:{dev['max_output_channels']})")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            device = sd.default.device[0]
            if device is None or device >= len(devices):
                raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            device_info = devices[device]
            if device_info['max_input_channels'] < 1:
                raise RuntimeError(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_info['name']} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π –∑–≤—É–∫")
            channels = min(2, device_info['max_input_channels'])
            sd.check_input_settings(
                device=device,
                samplerate=self.sample_rate,
                channels=channels,
                dtype='float32'
            )
            self.input_stream = sd.InputStream(
                samplerate=self.sample_rate,
                channels=channels,
                blocksize=1024,
                callback=callback,
                device=device,
                dtype='float32'
            )
            self.input_stream.start()
            logging.info(f"üéôÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: {device_info['name']} (–∫–∞–Ω–∞–ª—ã: {channels})")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {type(e).__name__}: {e}")
            self.stop_microphone_stream()

    def stop_microphone_stream(self):
        if self.input_stream:
            try:
                if self.input_stream.active:
                    self.input_stream.stop()
                self.input_stream.close()
                logging.info("üõë –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {type(e).__name__}: {e}")
            finally:
                self.input_stream = None