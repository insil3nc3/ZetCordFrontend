from PyQt6.QtCore import QObject, QEvent, QUrl, QBuffer, QIODevice, QCoreApplication, QThread, QMetaObject, Qt, \
    pyqtSignal, pyqtSlot
from PyQt6.QtMultimedia import QMediaPlayer, QAudioSink, QAudioFormat, QAudio, QAudioOutput, QMediaDevices
import sounddevice as sd
import numpy as np
import logging
from scipy import signal

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class InitializeAudioEvent(QEvent):
    EventType = QEvent.Type(QEvent.registerEventType())

    def __init__(self):
        super().__init__(self.EventType)


class AudioManager(QObject):
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–ª–∞—Å—Å–∞)
    play_ringtone_signal = pyqtSignal(str, bool)
    play_notification_signal = pyqtSignal(str)
    play_audio_chunk_signal = pyqtSignal(np.ndarray)
    init_signal = pyqtSignal()  # –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def __init__(self, sample_rate=44100, channels=2, parent=None):
        super().__init__(parent)

        if not QCoreApplication.instance():
            raise RuntimeError("QApplication must be created before AudioManager")

        self.moveToThread(QCoreApplication.instance().thread())

        self.sample_rate = sample_rate
        self.output_channels = channels
        self.input_stream = None
        self.audio_output = None
        self.audio_buffer = None

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ super().__init__())
        self.init_signal.connect(self._init_media_players)
        self.play_ringtone_signal.connect(self._play_ringtone)
        self.play_notification_signal.connect(self._play_notification)
        self.play_audio_chunk_signal.connect(self._play_audio_chunk_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
        self.init_signal.emit()

        self._output_stopped_intentionally = False
        self._pending_audio_chunks = []

    @pyqtSlot()
    def _init_media_players(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞-–ø–ª–µ–µ—Ä–æ–≤"""
        try:
            self.ringtone_player = QMediaPlayer()
            self.ringtone_output = QAudioOutput()
            self.ringtone_player.setAudioOutput(self.ringtone_output)

            self.notification_player = QMediaPlayer()
            self.notification_output = QAudioOutput()
            self.notification_player.setAudioOutput(self.notification_output)
            logging.info("–ú–µ–¥–∏–∞-–ø–ª–µ–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-–ø–ª–µ–µ—Ä–æ–≤: {e}")

    # –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–∏–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ

    def customEvent(self, event):
        if event.type() == InitializeAudioEvent.EventType:
            self._initialize_audio_output()

    def _play_ringtone(self, path: str, loop: bool):
        try:
            self.ringtone_player.setSource(QUrl.fromLocalFile(path))
            self.ringtone_output.setVolume(0.8)
            self.ringtone_player.setLoops(-1 if loop else 1)
            self.ringtone_player.play()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∏–Ω–≥—Ç–æ–Ω–∞: {e}")

    def play_ringtone(self, path: str, loop: bool = True):
        """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        self.play_ringtone_signal.emit(path, loop)

    def _play_notification(self, path: str):
        try:
            self.notification_player.setSource(QUrl.fromLocalFile(path))
            self.notification_output.setVolume(0.6)
            self.notification_player.play()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def play_notification(self, path: str):
        """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        self.play_notification_signal.emit(path)

    def _play_audio_chunk_handler(self, audio_chunk: np.ndarray):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ-—á–∞–Ω–∫–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not self.audio_output or self.audio_output.state() not in (
            QAudio.State.ActiveState, QAudio.State.IdleState):
                self._pending_audio_chunks.append(audio_chunk)
                QCoreApplication.postEvent(self, InitializeAudioEvent())
                return

            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...
            audio_bytes = audio_chunk.tobytes()
            self.audio_buffer.write(audio_bytes)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")

    def play_audio_chunk(self, audio_chunk: np.ndarray):
        """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        self.play_audio_chunk_signal.emit(audio_chunk.copy())


    def _initialize_audio_output(self, audio_format=None):
        """Initialize or reinitialize QAudioSink with a given format."""
        try:
            if self.audio_output and self.audio_output.state() in (QAudio.State.ActiveState, QAudio.State.IdleState):
                return True

            self.stop_output_stream()

            if audio_format is None:
                audio_format = QAudioFormat()
                audio_format.setSampleRate(self.sample_rate)
                audio_format.setChannelCount(self.output_channels)
                audio_format.setSampleFormat(QAudioFormat.SampleFormat.Float)

            formats_to_try = [
                audio_format,
                QAudioFormat(audio_format),
                QAudioFormat(audio_format),
            ]
            formats_to_try[1].setSampleFormat(QAudioFormat.SampleFormat.Int16)
            formats_to_try[2].setSampleRate(44100)
            formats_to_try[2].setSampleFormat(QAudioFormat.SampleFormat.Int16)

            for fmt in formats_to_try:
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {fmt.sampleRate()}Hz, {fmt.channelCount()} –∫–∞–Ω–∞–ª–æ–≤, {fmt.sampleFormat()}")
                self.audio_output = QAudioSink(QMediaDevices.defaultAudioOutput(), fmt)
                if self.audio_output.format().sampleFormat() in (
                    QAudioFormat.SampleFormat.UInt8,
                    QAudioFormat.SampleFormat.Int16,
                    QAudioFormat.SampleFormat.Int32,
                    QAudioFormat.SampleFormat.Float
                ):
                    logging.info(f"–§–æ—Ä–º–∞—Ç –ø—Ä–∏–Ω—è—Ç: {self.audio_output.format().sampleRate()}Hz, {self.audio_output.format().sampleFormat()}")
                    break
            else:
                self.audio_output = QAudioSink(QMediaDevices.defaultAudioOutput())
                fmt = self.audio_output.format()
                logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {fmt.sampleRate()}Hz, {fmt.channelCount()} –∫–∞–Ω–∞–ª–æ–≤, {fmt.sampleFormat()}")

            self.audio_output.setVolume(1.0)
            self.audio_output.setBufferSize(1024 * 16)
            self.audio_buffer = QBuffer()
            self.audio_buffer.open(QIODevice.OpenModeFlag.ReadWrite)
            self.audio_output.start(self.audio_buffer)
            logging.info(f"üîä –ê—É–¥–∏–æ–≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: {fmt.sampleRate()}Hz, {fmt.channelCount()} –∫–∞–Ω–∞–ª–æ–≤, {fmt.sampleFormat()}")
            self._output_stopped_intentionally = False

            self._process_pending_chunks()
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QAudioSink: {type(e).__name__}: {e}")
            self.stop_output_stream()
            return False

    def _process_pending_chunks(self):
        while self._pending_audio_chunks:
            chunk = self._pending_audio_chunks.pop(0)
            self.play_audio_chunk(chunk)

    def start_output_stream(self):
        if self.audio_output and self.audio_output.state() in (QAudio.State.ActiveState, QAudio.State.IdleState):
            logging.info("üîä –ê—É–¥–∏–æ–≤—ã—Ö–æ–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        QCoreApplication.postEvent(self, InitializeAudioEvent())


    def stop_output_stream(self):
        if self.audio_output:
            try:
                self.audio_output.stop()
                if self.audio_buffer:
                    self.audio_buffer.close()
                logging.info("üîá –ê—É–¥–∏–æ–≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ QAudioSink: {type(e).__name__}: {e}")
            finally:
                self.audio_output = None
                self.audio_buffer = None
                self._output_stopped_intentionally = True
                self._pending_audio_chunks.clear()


    def stop_ringtone(self):
        try:
            self.ringtone_player.stop()
            logging.info("üì¥ –†–∏–Ω–≥—Ç–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∏–Ω–≥—Ç–æ–Ω–∞: {type(e).__name__}: {e}")


    def start_microphone_stream(self, callback):
        try:
            devices = sd.query_devices()
            logging.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            for i, dev in enumerate(devices):
                logging.info(f"{i}: {dev['name']} (in:{dev['max_input_channels']} out:{dev['max_output_channels']})")
            device = sd.default.device[0]
            if device is None or device >= len(devices):
                raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            device_info = devices[device]
            if device_info['max_input_channels'] < 1:
                raise RuntimeError(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_info['name']} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π –∑–≤—É–∫")
            channels = min(2, device_info['max_input_channels'])
            sd.check_input_settings(
                device=device,
                samplerate=self.sample_rate,
                channels=channels,
                dtype='float32'
            )
            self.input_stream = sd.InputStream(
                samplerate=self.sample_rate,
                channels=channels,
                blocksize=1024,
                callback=callback,
                device=device,
                dtype='float32',
                extra_settings={
                    'encoding': 'latin1',
                    'dtype_unicode': 'float32'
                }
            )
            self.input_stream.start()
            logging.info(f"üéôÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: {device_info['name']} (–∫–∞–Ω–∞–ª—ã: {channels})")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {type(e).__name__}: {e}")
            self.stop_microphone_stream()

    def stop_microphone_stream(self):
        if self.input_stream:
            try:
                if self.input_stream.active:
                    self.input_stream.stop()
                self.input_stream.close()
                logging.info("üõë –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {type(e).__name__}: {e}")
            finally:
                self.input_stream = None

class AudioReceiverTrack:
    def __init__(self, track, audio_manager):
        self.track = track
        self.audio_manager = audio_manager
        self.running = True

    async def receive_audio(self):
        try:
            self.audio_manager.start_output_stream()
            logging.info("üîÅ –ù–∞—á–∞—Ç –ø—Ä–∏—ë–º –∞—É–¥–∏–æ—Ñ—Ä–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ AudioReceiverTrack")

            while self.running and self.track.readyState == "live":
                frame = await self.track.recv()
                audio_data = frame.to_ndarray().astype(np.float32) / 32768.0
                audio_data = np.clip(audio_data * 20.0, -1.0, 1.0)

                if frame.sample_rate != self.audio_manager.sample_rate:
                    logging.debug(f"–†–µ—Å—ç–º–ø–ª–∏–Ω–≥: {frame.sample_rate}Hz -> {self.audio_manager.sample_rate}Hz")
                    num_samples = int(len(audio_data) * self.audio_manager.sample_rate / frame.sample_rate)
                    audio_data = signal.resample(audio_data, num_samples)

                if audio_data.ndim == 1:
                    audio_data = np.repeat(audio_data[:, np.newaxis], 2, axis=1)
                elif audio_data.shape[1] == 1:
                    audio_data = np.repeat(audio_data, 2, axis=1)

                max_amplitude = np.max(np.abs(audio_data))
                if max_amplitude > 1.0:
                    audio_data = audio_data / max_amplitude

                self.audio_manager.play_audio_chunk(audio_data)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AudioReceiverTrack: {e}")
        finally:
            self.audio_manager.stop_output_stream()

    async def stop(self):
        self.running = False