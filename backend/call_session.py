import asyncio
import numpy as np
import sounddevice as sd
from aiortc import RTCPeerConnection, RTCIceCandidate, RTCSessionDescription
from aiortc.contrib.media import MediaStreamError
from backend.microphone_stream import MicrophoneStreamTrack

class CallSession:
    def __init__(self, send_ice_callback, audio_manager, audio_device=None):
        self.pc = None
        self.send_ice_callback = send_ice_callback
        self.audio_manager = audio_manager
        self.audio_device = audio_device if audio_device else 0
        self.microphone = None
        self.remote_track = None
        self.call_active = False
        self._initialize()

    def _initialize(self):
        try:
            self.pc = RTCPeerConnection()
            devices = sd.query_devices()
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            for i, dev in enumerate(devices):
                print(f"{i}: {dev['name']} (in:{dev['max_input_channels']} out:{dev['max_output_channels']})")

            # –í—ã–±–∏—Ä–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
            selected_device = None
            if self.audio_device is not None:
                device_info = sd.query_devices(self.audio_device)
                if device_info['max_input_channels'] >= 1:
                    selected_device = self.audio_device
                else:
                    print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º {self.audio_device} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π –∑–≤—É–∫")
            if selected_device is None:
                for i, dev in enumerate(devices):
                    if dev['max_input_channels'] >= 1:
                        selected_device = i
                        break
                else:
                    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Ö–æ–¥–Ω–æ–≥–æ –∑–≤—É–∫–∞")

            self.audio_device = selected_device
            device_info = sd.query_devices(self.audio_device)
            print(f"–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: {device_info['name']} (–∏–Ω–¥–µ–∫—Å {self.audio_device})")
            channels = min(2, device_info['max_input_channels'])
            try:
                self.microphone = MicrophoneStreamTrack(device=self.audio_device, channels=channels)
            except Exception as e:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å MicrophoneStreamTrack: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏
            existing_sender = None
            for sender in self.pc.getSenders():
                if sender.track:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏ —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç—Ä–µ–∫–æ–º
                    existing_sender = sender
                    break
            if existing_sender:
                try:
                    asyncio.get_event_loop().run_until_complete(existing_sender.replaceTrack(self.microphone))
                    print(f"üì° RTCRtpSender –æ–±–Ω–æ–≤–ª–µ–Ω: track={self.microphone}, stream_id={existing_sender._stream_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ç—Ä–µ–∫–∞ –≤ _initialize: {type(e).__name__}: {e}")
                    sender = self.pc.addTrack(self.microphone)
                    print(f"üì° RTCRtpSender –¥–æ–±–∞–≤–ª–µ–Ω –≤–º–µ—Å—Ç–æ –∑–∞–º–µ–Ω—ã: track={sender.track}, stream_id={sender._stream_id}")
            else:
                sender = self.pc.addTrack(self.microphone)
                print(f"üì° RTCRtpSender –¥–æ–±–∞–≤–ª–µ–Ω: track={sender.track}, stream_id={sender._stream_id}")
            self.pc.on("icecandidate", self.on_icecandidate)
            self.pc.on("[0mtrack", self._handle_track)
            self.pc.on("connectionstatechange", self.on_connectionstatechange)
            self.pc.on("datachannel", lambda event: print(f"–ü–æ–ª—É—á–µ–Ω DataChannel: {event.channel.label}"))
            self.pc.on("iceconnectionstatechange", lambda: print(f"ICE connection state: {self.pc.iceConnectionState}"))
            self.pc.on("signalingstatechange", lambda: print(f"Signaling state: {self.pc.signalingState}"))
            print("CallSession –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CallSession: {type(e).__name__}: {e}")
            asyncio.create_task(self.cleanup())
            raise

    def _handle_track(self, track):
        print(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫: {track.kind}, id={track.id}")
        if track.kind == "audio":
            self.remote_track = track
            self.call_active = True
            asyncio.create_task(self._receive_audio(track))

    async def _receive_audio(self, track):
        try:
            self.audio_manager.start_output_stream()
            print("üîÅ –ù–∞—á–∞—Ç –ø—Ä–∏—ë–º –∞—É–¥–∏–æ—Ñ—Ä–µ–π–º–æ–≤")
            timeout = 10
            elapsed = 0
            while self.pc.connectionState != "connected" and elapsed < timeout:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è... (—Ç–µ–∫—É—â–µ–µ: {self.pc.connectionState})")
                await asyncio.sleep(0.1)
                elapsed += 0.1
            if self.pc.connectionState != "connected":
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {self.pc.connectionState}")
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            while self.call_active and self.pc and self.pc.connectionState == "connected" and track.readyState == "live":
                try:
                    frame = await track.recv()
                    audio_data = frame.to_ndarray()
                    print(
                        f"üéß –ü–æ–ª—É—á–µ–Ω —Ñ—Ä–µ–π–º: shape={audio_data.shape}, dtype={audio_data.dtype}, max={np.max(np.abs(audio_data))}, samples={frame.samples}, sample_rate={frame.sample_rate}")
                    if audio_data.dtype != np.float32:
                        audio_data = audio_data.astype(np.float32)
                    # –£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (x10, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–ª–∏–ø–ø–∏–Ω–≥–∞)
                    audio_data = np.clip(audio_data * 10.0, -32768, 32767).astype(np.float32) / 32768.0
                    if audio_data.ndim == 1:
                        audio_data = np.repeat(audio_data[:, np.newaxis], 2, axis=1)
                    elif audio_data.shape[1] == 1:
                        audio_data = np.repeat(audio_data, 2, axis=1)
                    max_amplitude = np.max(np.abs(audio_data))
                    if max_amplitude > 1.0:
                        audio_data = audio_data / max_amplitude
                        print(f"–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –Ω–æ–≤—ã–π max={np.max(np.abs(audio_data))}")
                    self.audio_manager.play_audio_chunk(audio_data)
                except MediaStreamError:
                    print("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –∞—É–¥–∏–æ: {type(e).__name__}: {e}")
                    if isinstance(e, (StopAsyncIteration, asyncio.CancelledError)):
                        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
                        break
                    await asyncio.sleep(0.05)
                    continue
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _receive_audio: {type(e).__name__}: {e}")
        finally:
            print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ç—Ä–µ–∫–∞")
            if self.call_active:
                self.call_active = False
                await self.cleanup()

    async def cleanup(self):
        print(
            f"üßπ cleanup() –≤—ã–∑–≤–∞–Ω, call_active={self.call_active}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ={self.pc.connectionState if self.pc else '–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}")
        if self.microphone:
            print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
            self.microphone.stop()
            self.microphone = None
        if self.remote_track:
            print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
            self.remote_track.stop()
            self.remote_track = None
        if self.pc:
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ RTCPeerConnection")
            try:
                await self.pc.close()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ RTCPeerConnection: {type(e).__name__}: {e}")
            self.pc = None
        self.audio_manager.stop_output_stream()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

    async def close_this(self):
        print("–í—ã–∑–æ–≤ CallSession.close")
        self.call_active = False
        await self.cleanup()

    def on_connectionstatechange(self):
        if self.pc:
            state = self.pc.connectionState
            print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {state}")
            if state in ["failed", "closed"] and self.call_active:
                self.call_active = False
                asyncio.create_task(self.cleanup())

    async def create_offer(self):
        try:
            if not self.pc:
                raise RuntimeError("RTCPeerConnection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç")
            if not self.microphone:
                raise RuntimeError("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            track_already_added = False
            for sender in self.pc.getSenders():
                if sender.track == self.microphone:
                    track_already_added = True
                    print(f"üì° –¢—Ä–µ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ RTCRtpSender: track={self.microphone}, stream_id={sender._stream_id}")
                    break
            if not track_already_added:
                sender = self.pc.addTrack(self.microphone)
                print(f"üì° RTCRtpSender –¥–æ–±–∞–≤–ª–µ–Ω –≤ create_offer: track={sender.track}, stream_id={sender._stream_id}")
            offer = await self.pc.createOffer()
            await self.pc.setLocalDescription(offer)
            print("–û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω")
            return self.pc.localDescription
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞: {type(e).__name__}: {e}")
            raise

    async def create_answer(self):
        try:
            if not self.pc:
                raise RuntimeError("RTCPeerConnection –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            track_already_added = False
            for sender in self.pc.getSenders():
                if sender.track == self.microphone:
                    track_already_added = True
                    print(f"üì° –¢—Ä–µ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ RTCRtpSender: track={self.microphone}, stream_id={sender._stream_id}")
                    break
            if not track_already_added:
                sender = self.pc.addTrack(self.microphone)
                print(f"üì° RTCRtpSender –¥–æ–±–∞–≤–ª–µ–Ω –≤ create_answer: track={sender.track}, stream_id={sender._stream_id}")
            answer = await self.pc.createAnswer()
            await self.pc.setLocalDescription(answer)
            print("–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω")
            return self.pc.localDescription
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {type(e).__name__}: {e}")
            raise

    async def set_remote_description(self, desc):
        try:
            if isinstance(desc, dict):
                if "type" not in desc or "sdp" not in desc:
                    raise ValueError("–°–ª–æ–≤–∞—Ä—å SDP –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏ 'type' –∏ 'sdp'")
                desc = RTCSessionDescription(sdp=desc["sdp"], type=desc["type"])
            print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: type={desc.type}, sdp={desc.sdp[:100]}...")
            await self.pc.setRemoteDescription(desc)
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞: {desc.type}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {type(e).__name__}: {e}")
            raise

    async def on_icecandidate(self, event):
        if event.candidate:
            await self.send_ice_callback({
                "type": "ice_candidate",
                "candidate": {
                    "candidate": event.candidate.candidate,
                    "sdpMid": event.candidate.sdpMid,
                    "sdpMLineIndex": event.candidate.sdpMLineIndex,
                }
            })
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç: {event.candidate.candidate[:50]}...")

    async def add_ice_candidate(self, candidate):
        try:
            ice_candidate = RTCIceCandidate(
                candidate=candidate["candidate"],
                sdpMid=candidate["sdpMid"],
                sdpMLineIndex=candidate["sdpMLineIndex"]
            )
            await self.pc.addIceCandidate(ice_candidate)
            print("–î–æ–±–∞–≤–ª–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {type(e).__name__}: {e}")