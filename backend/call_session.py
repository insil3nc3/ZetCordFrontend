import asyncio
import logging

from aiortc import RTCPeerConnection, RTCSessionDescription, RTCIceCandidate, RTCConfiguration, RTCIceServer

from backend.audio_manager import AudioReceiverTrack
from backend.microphone_stream import AudioStreamTrack

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class CallSession:
    def __init__(self, audio_manager, send_ice_callback, user_id):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å STUN —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ NAT
        # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        self.config = RTCConfiguration([
            RTCIceServer(urls=["stun:stun.l.google.com:19302"]),
            RTCIceServer(urls=["stun:stun1.l.google.com:19302"]),
            RTCIceServer(urls=["stun:stun2.l.google.com:19302"])
        ])

        self.pc = RTCPeerConnection(configuration=self.config)
        self.audio_manager = audio_manager
        self.send_ice_callback = send_ice_callback
        self.user_id = user_id
        self.call_active = False
        self.receiver_track = None
        self.audio_track = None
        self.ice_candidates_queue = []  # –û—á–µ—Ä–µ–¥—å –¥–ª—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WebRTC
        self.pc.on("icecandidate", lambda c: asyncio.create_task(self.on_icecandidate(c)))
        self.pc.on("track", self.on_track)
        self.pc.on("connectionstatechange", self.on_connection_state_change)
        self.pc.on("icegatheringstatechange", self.on_ice_gathering_state_change)
        self.pc.on("iceconnectionstatechange", self.on_ice_connection_state_change)
        print("CallSession —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ-—Ç—Ä–µ–∫ (–º–∏–∫—Ä–æ—Ñ–æ–Ω)
        try:
            self.audio_track = AudioStreamTrack()
            self.pc.addTrack(self.audio_track)
            print("üéôÔ∏è –ê—É–¥–∏–æ-—Ç—Ä–µ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ-—Ç—Ä–µ–∫–∞: {e}")

    async def on_icecandidate(self, candidate):
        print(f"on_icecandidate called with: {candidate}")
        if candidate and candidate.candidate:
            logging.info(f"üßä –ù–æ–≤—ã–π ICE –∫–∞–Ω–¥–∏–¥–∞—Ç: {candidate.candidate}")
            try:
                candidate_data = {
                    "type": "ice_candidate",
                    "to": self.user_id,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    "candidate": {
                        "candidate": candidate.candidate,
                        "sdpMid": candidate.sdpMid,
                        "sdpMLineIndex": candidate.sdpMLineIndex
                    }
                }
                await self.send_ice_callback(candidate_data)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                logging.info("‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")

    def on_track(self, track):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤"""
        print(f"üìª –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫: {track.kind}")
        if track.kind == "audio":
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º–Ω–∏–∫ –∞—É–¥–∏–æ
                self.receiver_track = AudioReceiverTrack(track, self.audio_manager)
                asyncio.create_task(self.receiver_track.receive_audio())
                print("üîä –ê—É–¥–∏–æ-–ø—Ä–∏–µ–º–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ-–ø—Ä–∏–µ–º–Ω–∏–∫–∞: {e}")

    def on_connection_state_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        state = self.pc.connectionState
        print(f"üîå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {state}")

        if state == "connected":
            print("‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.call_active = True
        elif state == "failed":
            print("‚ùå WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            self.call_active = False
            print(self.close())
        elif state == "disconnected":
            print("üì¥ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
            self.call_active = False
        elif state == "closed":
            print("üîí WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.call_active = False

    def on_ice_gathering_state_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±–æ—Ä–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        state = self.pc.iceGatheringState
        print(f"üßä ICE Gathering State: {state}")

        if state == "complete":
            print("‚úÖ ICE gathering –∑–∞–≤–µ—Ä—à–µ–Ω")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            print("–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ice –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            asyncio.create_task(self.process_queued_ice_candidates())

    def on_ice_connection_state_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        state = self.pc.iceConnectionState
        print(f"üßä ICE Connection State: {state}")

        if state == "connected":
            print("‚úÖ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        elif state == "completed":
            print("‚úÖ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        elif state == "failed":
            print("‚ùå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("‚ùå ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            print(f"Local description: {self.pc.localDescription}")
            print(f"Remote description: {self.pc.remoteDescription}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ICE
            asyncio.create_task(self.restart_ice())
        elif state == "disconnected":
            print("üì¥ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")

    async def restart_ice(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            await self.pc.close()
            self.pc = RTCPeerConnection(configuration=self.config)
            self.pc.on("icecandidate", lambda c: asyncio.create_task(self.on_icecandidate(c)))
            self.pc.on("track", self.on_track)
            self.pc.on("connectionstatechange", self.on_connection_state_change)
            self.pc.on("icegatheringstatechange", self.on_ice_gathering_state_change)
            self.pc.on("iceconnectionstatechange", self.on_ice_connection_state_change)
            print("CallSession —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω")
            self.pc.addTrack(self.audio_track)
            print("RTCPeerConnection –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ICE: {e}")

    async def create_offer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞"""
        try:
            print("üì§ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞...")
            offer = await self.pc.createOffer()
            await self.pc.setLocalDescription(offer)
            print(f"üì§ –û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω: type={offer.type}")

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            await asyncio.sleep(0.5)

            return offer
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞: {e}")
            raise

    async def create_answer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            print("üì® –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
            answer = await self.pc.createAnswer()
            await self.pc.setLocalDescription(answer)
            print(f"üì® –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω: type={answer.type}")

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            await asyncio.sleep(0.5)

            return answer
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            raise

    async def set_remote_description(self, sdp):
        print("–≤—ã–∑–≤–∞–ª–∞—Å—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è")
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            logging.info(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: type={sdp['type']}")
            print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: type={sdp['type']}")
            await self.pc.setRemoteDescription(
                RTCSessionDescription(sdp=sdp['sdp'], type=sdp['type'])
            )
            logging.info("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            print("–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ice –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            await self.process_queued_ice_candidates()

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            raise

    async def add_ice_candidate(self, candidate):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        print("–≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è add_ice_candidate")
        try:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if self.pc.remoteDescription is None:
                print("‚è≥ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å")
                self.ice_candidates_queue.append(candidate)
                return

            print(f"üßä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate['candidate'][:50]}...")
            ice_candidate = RTCIceCandidate(
                candidate["candidate"],
                candidate.get("sdpMid"),
                candidate.get("sdpMLineIndex")
            )
            await self.pc.addIceCandidate(ice_candidate)
            print("‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

    async def process_queued_ice_candidates(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        if not self.ice_candidates_queue:
            print("–Ω–µ—Ç—É –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ice –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            return

        print(f"üßä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(self.ice_candidates_queue)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")

        for candidate in self.ice_candidates_queue.copy():
            try:
                await self.add_ice_candidate(candidate)
                self.ice_candidates_queue.remove(candidate)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")

        print("‚úÖ –í—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            print("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ-–ø—Ä–∏–µ–º–Ω–∏–∫
            if self.receiver_track:
                await self.receiver_track.stop()
                self.receiver_track = None

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if hasattr(self, 'audio_track') and self.audio_track:
                self.audio_track.stop()
                self.audio_track = None

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            self.ice_candidates_queue.clear()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º RTCPeerConnection
            if self.pc and self.pc.connectionState != "closed":
                await self.pc.close()

            self.call_active = False
            print("‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        finally:
            self.call_active = False